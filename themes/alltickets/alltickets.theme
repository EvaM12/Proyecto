<?php

use Drupal\Core\Block\BlockBase;
use Drupal\Core\Database\Database;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Implementa la clase del bloque personalizado.
 */
class CustomDatabaseBlock extends BlockBase implements ContainerFactoryPluginInterface {

  /**
   * La conexi贸n de la base de datos.
   *
   * @var \Drupal\Core\Database\Connection
   */
  protected $database;

  /**
   * Constructor de la clase.
   *
   * @param array $configuration
   *   La configuraci贸n del bloque.
   * @param string $plugin_id
   *   El ID del plugin.
   * @param mixed $plugin_definition
   *   La definici贸n del plugin.
   * @param \Drupal\Core\Database\Connection $database
   *   La conexi贸n de la base de datos.
   */
  public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database) {
    parent::__construct($configuration, $plugin_id, $plugin_definition);
    $this->database = $database;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    return new static(
      $configuration,
      $plugin_id,
      $plugin_definition,
      $container->get('database')
    );
  }

  /**
   * {@inheritdoc}
   */
  public function build() {
    // Realiza la consulta a la tabla de la base de datos.
    $query = $database->select('menu_link_content_field_revision', 't');
    $query->fields('t', ['title', 'link__url']);
    // Agrega condiciones, si es necesario.
    // $query->condition(...);
    $results = $query->execute()->fetchAll();

    // Construye el contenido del bloque.
    $content = '';
    foreach ($results as $result) {
      $content .= '<div>';
      $content .= '<p>Campo 1: ' . $result->title . '</p>';
      $content .= '<p>Campo 2: ' . $result->link__uri . '</p>';
      $content .= '</div>';
    }

    return [
      '#markup' => $content,
    ];
  }

}